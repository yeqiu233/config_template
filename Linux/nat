#!/bin/bash

# 配置文件路径
INTERFACES_FILE="/etc/network/interfaces"
RULES_FILE="/etc/network/nat-rules.sh"
CONFIG_FILE="/etc/nat_config"
CONFIG_BLOCK="vmbr0"

# 默认网络接口
DEFAULT_IFACE="enp0s6"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # 无颜色

# 初始化规则文件
init_rules_file() {
    if [ ! -f "$RULES_FILE" ]; then
        echo "#!/bin/bash" > "$RULES_FILE"
        echo "# 网络启动时自动加载的NAT规则" >> "$RULES_FILE"
        echo "# 请不要手动修改此文件，使用脚本管理规则" >> "$RULES_FILE"
        chmod +x "$RULES_FILE"
        echo -e "${GREEN}创建规则文件: $RULES_FILE${NC}"
    fi
    
    if ! grep -q "post-up $RULES_FILE" "$INTERFACES_FILE"; then
        if grep -q "iface $CONFIG_BLOCK inet static" "$INTERFACES_FILE"; then
            sed -i "/iface $CONFIG_BLOCK inet static/ a\    post-up $RULES_FILE" "$INTERFACES_FILE"
            echo -e "${GREEN}添加规则引用到 $CONFIG_BLOCK 配置块${NC}"
        else
            echo -e "${RED}错误：未找到 $CONFIG_BLOCK 配置块${NC}"
            return 1
        fi
    fi
    return 0
}

# 加载配置
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        EXTERNAL_IF="$DEFAULT_IFACE"
        save_config
    fi
    init_rules_file
}

# 保存配置
save_config() {
    echo "EXTERNAL_IF='$EXTERNAL_IF'" > "$CONFIG_FILE"
    echo "RULES_FILE='$RULES_FILE'" >> "$CONFIG_FILE"
    chmod 600 "$CONFIG_FILE"
}

# 检查root权限
check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}错误：此脚本需要root权限${NC}"
        exit 1
    fi
}

# 显示当前所有映射规则
list_rules() {
    echo -e "${YELLOW}\n当前端口映射规则：${NC}"
    echo -e "${BLUE}===========================================================================================================${NC}"
    echo -e "${GREEN}ID\t目标设备\t协议\t类型\t\t宿主机端口\t映射到目标端口${NC}"
    echo -e "${BLUE}-----------------------------------------------------------------------------------------------------------${NC}"
    
    local rule_id=1
    iptables-save -t nat | grep -E "PREROUTING.*DNAT" | while read -r rule; do
        target_ip=$(echo "$rule" | grep -oP " --to-destination \K[^:]+")
        protocol=$(echo "$rule" | grep -oP " -p \K\w+")
        [ -z "$protocol" ] && protocol="tcp/udp"
        
        ports=$(echo "$rule" | grep -oP "(--dport |multiport --dports )\K[\w\-,:]+")
        dest_port=$(echo "$rule" | grep -oP " --to-destination $target_ip:\K[\w\-,:]+")
        [ -z "$dest_port" ] && dest_port="$ports"
        
        if [[ "$ports" == *","* ]]; then
            port_type="离散端口"
        elif [[ "$ports" == *"-"* ]]; then
            port_type="端口范围"
        else
            port_type="单端口"
        fi
        
        echo -e "$rule_id\t$target_ip\t$protocol\t$port_type\t\t$ports\t$dest_port"
        ((rule_id++))
    done
    
    echo -e "${BLUE}===========================================================================================================${NC}"
    echo -e "${GREEN}规则总数: $((rule_id-1))${NC}"
}

# 检查端口是否已被使用
check_port_used() {
    local port=$1
    local protocol=$2
    
    if [ "$protocol" == "tcp" ] || [ "$protocol" == "both" ]; then
        ss -tuln | grep -q ":$port\b" && return 1
    fi
    
    if [ "$protocol" == "udp" ] || [ "$protocol" == "both" ]; then
        ss -uln | grep -q ":$port\b" && return 1
    fi
    
    return 0
}

# 检查端口范围是否可用
check_port_range() {
    local start=$1
    local end=$2
    local protocol=$3
    
    for port in $(seq "$start" "$end"); do
        check_port_used "$port" "$protocol" && continue
        echo "$port"
        return 1
    done
    
    return 0
}

# 显示规则预览并确认
confirm_rule_addition() {
    local protocol=$1
    shift
    local commands=("$@")
    
    echo -e "${GREEN}\n规则预览：${NC}"
    for cmd in "${commands[@]}"; do
        echo "$cmd"
    done
    
    read -p "是否添加此规则? (y/n): " confirm
    [[ "$confirm" =~ ^[Yy]$ ]] || { echo -e "${YELLOW}已取消添加规则${NC}"; return 1; }
    return 0
}

# 添加规则到文件并应用
add_rule_to_system() {
    local desc=$1
    shift
    local commands=("$@")
    
    echo -e "\n# $desc" >> "$RULES_FILE"
    for cmd in "${commands[@]}"; do
        echo "$cmd" >> "$RULES_FILE"
        eval "$cmd"
    done
    echo "" >> "$RULES_FILE"
}

# 添加单端口规则
add_single_port() {
    echo -e "${YELLOW}\n添加单端口映射规则${NC}"
    
    read -p "输入宿主机端口: " host_port
    read -p "协议 (tcp/udp/both): " protocol
    read -p "输入目标设备IP: " target_ip
    read -p "输入目标设备端口: " target_port
    
    # 验证输入
    if ! [[ "$host_port" =~ ^[0-9]+$ ]] || ! [[ "$target_port" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}错误：端口必须是数字${NC}"
        return
    fi
    
    if (( host_port < 1 || host_port > 65535 )); then
        echo -e "${RED}错误：宿主机端口必须在1-65535范围内${NC}"
        return
    fi
    
    if (( target_port < 1 || target_port > 65535 )); then
        echo -e "${RED}错误：目标端口必须在1-65535范围内${NC}"
        return
    fi
    
    # 检查端口是否可用
    if [[ "$protocol" == "both" ]]; then
        check_port_used "$host_port" "tcp" || { echo -e "${RED}错误：TCP端口 $host_port 已被使用${NC}"; return; }
        check_port_used "$host_port" "udp" || { echo -e "${RED}错误：UDP端口 $host_port 已被使用${NC}"; return; }
    else
        check_port_used "$host_port" "$protocol" || { echo -e "${RED}错误：$protocol 端口 $host_port 已被使用${NC}"; return; }
    fi
    
    # 准备命令
    local commands=()
    local desc="单端口映射: $host_port -> $target_ip:$target_port"
    
    if [[ "$protocol" == "tcp" || "$protocol" == "both" ]]; then
        commands+=("iptables -t nat -A PREROUTING -i $EXTERNAL_IF -p tcp --dport $host_port -j DNAT --to-destination $target_ip:$target_port")
        commands+=("iptables -A FORWARD -i $EXTERNAL_IF -d $target_ip -p tcp --dport $target_port -j ACCEPT")
    fi
    
    if [[ "$protocol" == "udp" || "$protocol" == "both" ]]; then
        commands+=("iptables -t nat -A PREROUTING -i $EXTERNAL_IF -p udp --dport $host_port -j DNAT --to-destination $target_ip:$target_port")
        commands+=("iptables -A FORWARD -i $EXTERNAL_IF -d $target_ip -p udp --dport $target_port -j ACCEPT")
    fi
    
    # 确认并添加
    confirm_rule_addition "$protocol" "${commands[@]}" || return
    add_rule_to_system "$desc" "${commands[@]}"
    echo -e "${GREEN}\n规则已添加并生效！${NC}"
}

# 添加端口范围规则
add_port_range() {
    echo -e "${YELLOW}\n添加端口范围映射规则${NC}"
    
    read -p "输入宿主机起始端口: " host_start
    read -p "输入宿主机结束端口: " host_end
    read -p "协议 (tcp/udp/both): " protocol
    read -p "输入目标设备IP: " target_ip
    read -p "输入目标设备起始端口: " target_start
    read -p "输入目标设备结束端口: " target_end
    
    # 验证输入
    if ! [[ "$host_start" =~ ^[0-9]+$ ]] || ! [[ "$host_end" =~ ^[0-9]+$ ]] || \
       ! [[ "$target_start" =~ ^[0-9]+$ ]] || ! [[ "$target_end" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}错误：端口必须是数字${NC}"
        return
    fi
    
    # 检查端口范围是否一致
    local host_range=$((host_end - host_start))
    local target_range=$((target_end - target_start))
    
    if (( host_range != target_range )); then
        echo -e "${RED}错误：端口范围大小不一致${NC}"
        return
    fi
    
    # 检查端口范围是否可用
    if [[ "$protocol" == "both" ]]; then
        check_port_range "$host_start" "$host_end" "tcp" || { echo -e "${RED}错误：TCP端口 $? 已被使用${NC}"; return; }
        check_port_range "$host_start" "$host_end" "udp" || { echo -e "${RED}错误：UDP端口 $? 已被使用${NC}"; return; }
    else
        check_port_range "$host_start" "$host_end" "$protocol" || { echo -e "${RED}错误：$protocol 端口 $? 已被使用${NC}"; return; }
    fi
    
    # 准备命令
    local commands=()
    local desc="端口范围映射: $host_start-$host_end -> $target_ip:$target_start-$target_end"
    
    if [[ "$protocol" == "tcp" || "$protocol" == "both" ]]; then
        commands+=("iptables -t nat -A PREROUTING -i $EXTERNAL_IF -p tcp --dport $host_start:$host_end -j DNAT --to-destination $target_ip:$target_start-$target_end")
        commands+=("iptables -A FORWARD -i $EXTERNAL_IF -d $target_ip -p tcp --dport $target_start:$target_end -j ACCEPT")
    fi
    
    if [[ "$protocol" == "udp" || "$protocol" == "both" ]]; then
        commands+=("iptables -t nat -A PREROUTING -i $EXTERNAL_IF -p udp --dport $host_start:$host_end -j DNAT --to-destination $target_ip:$target_start-$target_end")
        commands+=("iptables -A FORWARD -i $EXTERNAL_IF -d $target_ip -p udp --dport $target_start:$target_end -j ACCEPT")
    fi
    
    # 确认并添加
    confirm_rule_addition "$protocol" "${commands[@]}" || return
    add_rule_to_system "$desc" "${commands[@]}"
    echo -e "${GREEN}\n规则已添加并生效！${NC}"
}

# 设置网络接口
set_network_interface() {
    echo -e "${YELLOW}\n当前网络接口配置：${NC}"
    echo -e "外部网络接口: $EXTERNAL_IF"
    
    local available_ifaces=$(ip -o link show | awk -F': ' '{print $2}' | grep -v lo)
    
    echo -e "\n${YELLOW}系统可用网络接口：${NC}"
    echo "$available_ifaces"
    
    read -p "是否要更改外部网络接口? (y/n): " change_confirm
    [[ "$change_confirm" =~ ^[Yy]$ ]] || { echo -e "${YELLOW}已取消更改${NC}"; return; }
    
    while true; do
        read -p "输入新的外部网络接口: " new_iface
        
        # 验证接口
        if ! grep -qw "$new_iface" <<< "$available_ifaces"; then
            echo -e "${RED}错误：接口 $new_iface 不存在${NC}"
            continue
        fi
        
        # 检查接口状态
        if ! ip link show "$new_iface" | grep -q "state UP"; then
            read -p "接口 $new_iface 未启用，是否继续使用? (y/n): " use_down
            [[ "$use_down" =~ ^[Yy]$ ]] || continue
        fi
        
        # 检查IP地址
        if ! ip addr show "$new_iface" | grep -q "inet "; then
            read -p "接口 $new_iface 没有IP地址，是否继续? (y/n): " use_noip
            [[ "$use_noip" =~ ^[Yy]$ ]] || continue
        fi
        
        # 确认更改
        read -p "确认更改外部网络接口为 $new_iface? (y/n): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            EXTERNAL_IF="$new_iface"
            save_config
            echo -e "${GREEN}外部网络接口已更新为 $new_iface${NC}"
            
            read -p "是否更新现有规则使用新接口? (y/n): " update_rules
            if [[ "$update_rules" =~ ^[Yy]$ ]]; then
                sed -i "s/-i [^ ]*/-i $EXTERNAL_IF/g" "$RULES_FILE"
                echo -e "${GREEN}所有规则已更新使用新接口${NC}"
            fi
            return
        else
            echo -e "${YELLOW}已取消更改${NC}"
            return
        fi
    done
}

# 删除单个规则
delete_single_rule() {
    local rule_id=$1
    
    # 获取规则信息
    local rule_info=$(iptables-save -t nat | grep -E "PREROUTING.*DNAT" | sed -n "${rule_id}p")
    [ -z "$rule_info" ] && { echo -e "${RED}错误：找不到规则ID $rule_id${NC}"; return 1; }
    
    # 提取规则参数
    local target_ip=$(echo "$rule_info" | grep -oP " --to-destination \K[^:]+")
    local protocol=$(echo "$rule_info" | grep -oP " -p \K\w+")
    [ -z "$protocol" ] && protocol="tcp/udp"
    
    local ports=$(echo "$rule_info" | grep -oP "(--dport |multiport --dports )\K[\w\-,:]+")
    local dest_port=$(echo "$rule_info" | grep -oP " --to-destination $target_ip:\K[\w\-,:]+")
    [ -z "$dest_port" ] && dest_port="$ports"
    
    # 确定规则类型
    local rule_type
    if [[ "$ports" == *","* ]]; then
        rule_type="离散端口"
    elif [[ "$ports" == *"-"* ]]; then
        rule_type="端口范围"
    else
        rule_type="单端口"
    fi
    
    # 显示规则详情
    echo -e "${YELLOW}规则ID: $rule_id${NC}"
    echo "目标设备: $target_ip"
    echo "协议: $protocol"
    echo "类型: $rule_type"
    echo "宿主机端口: $ports"
    echo "目标端口: $dest_port"
    
    # 删除iptables规则
    if [[ "$protocol" == "tcp" || "$protocol" == "tcp/udp" ]]; then
        iptables -t nat -D PREROUTING -i $EXTERNAL_IF -p tcp --dport $ports -j DNAT --to-destination $target_ip:$dest_port
        iptables -D FORWARD -i $EXTERNAL_IF -d $target_ip -p tcp --dport $dest_port -j ACCEPT
    fi
    
    if [[ "$protocol" == "udp" || "$protocol" == "tcp/udp" ]]; then
        iptables -t nat -D PREROUTING -i $EXTERNAL_IF -p udp --dport $ports -j DNAT --to-destination $target_ip:$dest_port
        iptables -D FORWARD -i $EXTERNAL_IF -d $target_ip -p udp --dport $dest_port -j ACCEPT
    fi
    
    # 从规则文件中删除
    local pattern="#.*$ports.*$target_ip"
    if grep -q "$pattern" "$RULES_FILE"; then
        sed -i "/$pattern/,/^$/d" "$RULES_FILE"
    fi
    
    echo -e "${GREEN}规则 $rule_id 已成功删除${NC}"
    return 0
}

# 删除规则（支持批量删除）
delete_rules() {
    echo -e "${YELLOW}\n删除端口映射规则${NC}"
    list_rules
    
    read -p "输入要删除的规则ID（多个ID用空格分隔）: " rule_ids
    [ -z "$rule_ids" ] && { echo -e "${YELLOW}已取消删除${NC}"; return; }
    
    # 验证输入并排序（从大到小）
    local valid_ids=()
    for id in $rule_ids; do
        if [[ "$id" =~ ^[0-9]+$ ]]; then
            valid_ids+=("$id")
        else
            echo -e "${RED}错误：'$id' 不是有效的规则ID${NC}"
        fi
    done
    
    # 倒序排序以便正确删除
    IFS=$'\n' sorted_ids=($(sort -rn <<< "${valid_ids[*]}"))
    unset IFS
    
    # 显示选中的规则
    echo -e "\n${YELLOW}选中的规则ID: ${sorted_ids[*]}${NC}"
    
    # 确认删除
    read -p "确认删除以上规则? (y/n): " confirm
    [[ "$confirm" =~ ^[Yy]$ ]] || { echo -e "${YELLOW}已取消删除${NC}"; return; }
    
    # 批量删除
    local success_count=0
    local fail_count=0
    
    for id in "${sorted_ids[@]}"; do
        if delete_single_rule "$id"; then
            ((success_count++))
        else
            ((fail_count++))
        fi
    done
    
    echo -e "\n${GREEN}删除完成！${NC}"
    echo -e "成功删除: ${GREEN}$success_count${NC} 条规则"
    [ $fail_count -gt 0 ] && echo -e "失败删除: ${RED}$fail_count${NC} 条规则"
}

# 主菜单
main_menu() {
    while true; do
        echo -e "\n${YELLOW}端口映射管理工具${NC}"
        echo -e "${BLUE}==============================${NC}"
        echo "1. 查看当前规则"
        echo "2. 添加单端口规则"
        echo "3. 添加端口范围规则"
        echo "4. 删除规则（支持批量）"
        echo "5. 设置网络接口"
        echo "6. 退出"
        echo -e "${BLUE}==============================${NC}"
        echo -e "${YELLOW}当前外部接口: $EXTERNAL_IF${NC}"
        
        read -p "请选择操作 [1-6]: " choice
        
        case $choice in
            1) list_rules ;;
            2) add_single_port ;;
            3) add_port_range ;;
            4) delete_rules ;;
            5) set_network_interface ;;
            6) echo -e "${GREEN}已退出${NC}"; exit 0 ;;
            *) echo -e "${RED}无效选择，请重新输入${NC}" ;;
        esac
        
        read -p "按回车键继续..."
    done
}

# 脚本入口
check_root
load_config
main_menu